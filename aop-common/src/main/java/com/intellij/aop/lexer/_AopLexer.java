/* The following code was generated by JFlex 1.4.1 on 04.08.08 16:57 */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.aop.lexer;

import com.intellij.aop.psi.AopElementTypes;
import consulo.language.ast.IElementType;
import consulo.language.lexer.FlexLexer;
import consulo.util.lang.CharArrayUtil;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 04.08.08 16:57 from the specification file
 * <tt>C:/Home/Idea/tools/lexer/../../svnPlugins/aop-common/core/com/intellij/aop/lexer/_AopLexer.flex</tt>
 */
public class _AopLexer implements FlexLexer {
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int PATH_ELEMENT = 1;
  public static final int AFTER_QUESTION = 2;
  public static final int YYINITIAL = 0;
  public static final int AFTER_DOT = 3;
  public static final int ANNO_PATTERN = 4;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\2\1\3\1\3\1\0\2\3\16\2\4\0\1\3\1\41\2\0" +
      "\1\1\1\0\1\42\1\0\1\34\1\35\1\33\1\44\1\36\1\0" +
      "\1\32\1\0\12\2\2\0\1\37\1\0\1\40\1\47\1\27\32\1" +
      "\1\45\1\0\1\46\1\0\1\1\1\0\1\14\1\6\1\11\1\20" +
      "\1\16\1\26\1\30\1\24\1\10\2\1\1\7\1\1\1\23\1\17" +
      "\1\4\1\1\1\12\1\21\1\15\1\5\1\13\1\31\1\50\1\22" +
      "\1\25\1\0\1\43\2\0\41\2\2\0\4\1\4\0\1\1\2\0" +
      "\1\2\7\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0" +
      "\u013f\1\31\0\162\1\4\0\14\1\16\0\5\1\11\0\1\1\21\0" +
      "\130\2\5\0\23\2\12\0\1\1\13\0\1\1\1\0\3\1\1\0" +
      "\1\1\1\0\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0" +
      "\202\1\1\0\4\2\3\0\105\1\1\0\46\1\2\0\2\1\6\0" +
      "\20\1\41\0\46\1\2\0\1\1\7\0\47\1\11\0\21\2\1\0" +
      "\27\2\1\0\3\2\1\0\1\2\1\0\2\2\1\0\1\2\13\0" +
      "\33\1\5\0\3\1\15\0\4\2\14\0\6\2\13\0\32\1\5\0" +
      "\13\1\16\2\7\0\12\2\4\0\2\1\1\2\143\1\1\0\1\1" +
      "\10\2\1\0\6\2\2\1\2\2\1\0\4\2\2\1\12\2\3\1" +
      "\2\0\1\1\17\0\1\2\1\1\1\2\36\1\33\2\2\0\3\1" +
      "\60\0\46\1\13\2\1\1\u014f\0\3\2\66\1\2\0\1\2\1\1" +
      "\20\2\2\0\1\1\4\2\3\0\12\1\2\2\2\0\12\2\21\0" +
      "\3\2\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0" +
      "\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0" +
      "\3\2\11\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2" +
      "\4\1\15\0\3\2\1\0\6\1\4\0\2\1\2\0\26\1\1\0" +
      "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0" +
      "\5\2\4\0\2\2\2\0\3\2\13\0\4\1\1\0\1\1\7\0" +
      "\14\2\3\1\14\0\3\2\1\0\11\1\1\0\3\1\1\0\26\1" +
      "\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\10\2" +
      "\1\0\3\2\1\0\3\2\2\0\1\1\17\0\2\1\2\2\2\0" +
      "\12\2\1\0\1\1\17\0\3\2\1\0\10\1\2\0\2\1\2\0" +
      "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1" +
      "\6\2\3\0\2\2\2\0\3\2\10\0\2\2\4\0\2\1\1\0" +
      "\3\1\4\0\12\2\1\0\1\1\20\0\1\2\1\1\1\0\6\1" +
      "\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1" +
      "\3\0\2\1\3\0\3\1\3\0\10\1\1\0\3\1\4\0\5\2" +
      "\3\0\3\2\1\0\4\2\11\0\1\2\17\0\11\2\11\0\1\1" +
      "\7\0\3\2\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1" +
      "\1\0\5\1\4\0\7\2\1\0\3\2\1\0\4\2\7\0\2\2" +
      "\11\0\2\1\4\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1" +
      "\1\0\27\1\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2" +
      "\1\0\3\2\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1" +
      "\4\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1\1\0\27\1" +
      "\1\0\20\1\4\0\6\2\2\0\3\2\1\0\4\2\11\0\1\2" +
      "\10\0\2\1\4\0\12\2\22\0\2\2\1\0\22\1\3\0\30\1" +
      "\1\0\11\1\1\0\1\1\2\0\7\1\3\0\1\2\4\0\6\2" +
      "\1\0\1\2\1\0\10\2\22\0\2\2\15\0\60\1\1\2\2\1" +
      "\7\2\4\0\10\1\10\2\1\0\12\2\47\0\2\1\1\0\1\1" +
      "\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1" +
      "\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1" +
      "\1\2\2\1\6\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1" +
      "\1\0\6\2\2\0\12\2\2\0\2\1\42\0\1\1\27\0\2\2" +
      "\6\0\12\2\13\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2" +
      "\10\1\1\0\42\1\6\0\24\2\1\0\2\2\4\1\4\0\10\2" +
      "\1\0\44\2\11\0\1\2\71\0\42\1\1\0\5\1\1\0\2\1" +
      "\1\0\7\2\3\0\4\2\6\0\12\2\6\0\6\1\4\2\106\0" +
      "\46\1\12\0\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0" +
      "\7\1\1\0\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0" +
      "\1\1\1\0\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0" +
      "\37\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0" +
      "\4\1\2\0\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0" +
      "\1\1\1\0\4\1\2\0\7\1\1\0\47\1\1\0\23\1\16\0" +
      "\11\2\56\0\125\1\14\0\u026c\1\2\0\10\1\12\0\32\1\5\0" +
      "\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\2\13\0\22\1" +
      "\3\2\13\0\22\1\2\2\14\0\15\1\1\0\3\1\1\0\2\2" +
      "\14\0\64\1\40\2\3\0\1\1\3\0\2\1\1\2\2\0\12\2" +
      "\41\0\3\2\2\0\12\2\6\0\130\1\10\0\51\1\1\2\126\0" +
      "\35\1\3\0\14\2\4\0\14\2\12\0\12\2\36\1\2\0\5\1" +
      "\u038b\0\154\1\224\0\234\1\4\0\132\1\6\0\26\1\2\0\6\1" +
      "\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1" +
      "\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1" +
      "\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1" +
      "\5\0\3\1\1\0\7\1\17\0\4\2\32\0\5\2\20\0\2\1" +
      "\23\0\1\1\13\0\4\2\6\0\6\2\1\0\1\1\15\0\1\1" +
      "\40\0\22\1\36\0\15\2\4\0\1\2\3\0\6\2\27\0\1\1" +
      "\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1" +
      "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\3\1\1\0\7\1" +
      "\3\0\3\1\5\0\5\1\26\0\44\1\u0e81\0\3\1\31\0\11\1" +
      "\6\2\1\0\5\1\2\0\5\1\4\0\126\1\2\0\2\2\2\0" +
      "\3\1\1\0\137\1\5\0\50\1\4\0\136\1\21\0\30\1\70\0" +
      "\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0" +
      "\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0\1\1\1\2" +
      "\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0" +
      "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0" +
      "\15\1\3\0\20\2\20\0\4\2\17\0\2\1\30\0\3\1\31\0" +
      "\1\1\6\0\5\1\1\0\207\1\2\0\1\2\4\0\1\1\13\0" +
      "\12\2\7\0\32\1\4\0\1\1\1\0\32\1\12\0\132\1\3\0" +
      "\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\2\1\3\0" +
      "\2\1\22\0\3\2\4\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\4\2\1\4\1\5\1\6" +
      "\1\7\1\10\1\11\1\12\1\13\1\14\2\1\1\15" +
      "\1\1\1\16\1\4\1\17\3\2\1\20\11\2\3\0" +
      "\1\21\1\22\1\23\1\24\14\2\5\0\1\25\2\2" +
      "\1\26\3\2\1\27\3\2\4\0\7\2\1\30\1\31" +
      "\3\0\1\2\1\32\2\2\1\33\1\2\3\0\3\2" +
      "\1\0\1\34\2\2\1\0\1\2\1\0";

  private static int[] zzUnpackAction() {
    int[] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f" +
      "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\315\0\315" +
      "\0\315\0\315\0\315\0\315\0\315\0\u023e\0\u0267\0\315" +
      "\0\u0290\0\315\0\315\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d" +
      "\0\315\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c" +
      "\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\315\0\315\0\315" +
      "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691" +
      "\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9" +
      "\0\u0802\0\315\0\u082b\0\u0854\0\366\0\u087d\0\u08a6\0\u08cf" +
      "\0\366\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee" +
      "\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\366" +
      "\0\315\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\366\0\u0bda\0\u0c03" +
      "\0\366\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22" +
      "\0\u0d4b\0\366\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\10\7\1\12\3\7" +
      "\1\13\4\7\1\14\1\15\2\7\1\16\1\17\1\20" +
      "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
      "\1\31\1\6\1\32\1\7\1\6\1\7\1\6\1\10" +
      "\23\7\1\33\2\7\1\16\1\17\1\20\1\21\1\22" +
      "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\6" +
      "\1\32\1\7\1\6\1\7\1\6\1\34\1\11\10\7" +
      "\1\12\1\35\2\7\1\36\4\7\1\14\1\33\2\7" +
      "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
      "\1\26\1\27\1\30\1\31\1\6\1\32\1\7\1\6" +
      "\1\7\1\6\1\34\17\7\1\37\3\7\1\33\2\7" +
      "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
      "\1\26\1\27\1\30\1\31\1\6\1\32\1\7\1\6" +
      "\1\7\1\6\1\40\1\11\10\7\1\12\3\7\1\13" +
      "\4\7\1\14\1\33\2\7\1\16\1\17\1\20\1\21" +
      "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
      "\1\6\1\32\1\7\52\0\2\7\1\0\23\7\1\0" +
      "\2\7\2\41\14\0\1\7\3\0\1\10\46\0\2\7" +
      "\1\0\1\7\1\42\4\7\1\43\14\7\1\0\2\7" +
      "\2\41\14\0\1\7\1\0\2\7\1\0\6\7\1\44" +
      "\11\7\1\45\2\7\1\0\2\7\2\41\14\0\1\7" +
      "\1\0\2\7\1\0\11\7\1\46\4\7\1\47\4\7" +
      "\1\0\2\7\2\41\14\0\1\7\1\0\2\7\1\0" +
      "\4\7\1\50\3\7\1\51\12\7\1\0\2\7\2\41" +
      "\14\0\1\7\14\0\1\52\1\53\13\0\1\54\51\0" +
      "\1\55\60\0\1\56\51\0\1\57\53\0\1\60\5\0" +
      "\1\34\46\0\2\7\1\0\23\7\1\0\2\7\2\41" +
      "\14\0\1\61\1\0\2\7\1\0\1\7\1\62\7\7" +
      "\1\46\4\7\1\47\4\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\12\7\1\63\10\7\1\0" +
      "\2\7\2\41\14\0\1\7\3\0\1\40\46\0\2\7" +
      "\1\0\2\7\1\64\20\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\4\7\1\65\6\7\1\66" +
      "\7\7\1\0\2\7\2\41\14\0\1\7\1\0\2\7" +
      "\1\0\1\7\1\67\21\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\6\7\1\70\14\7\1\0" +
      "\2\7\2\41\14\0\1\7\1\0\2\7\1\0\10\7" +
      "\1\71\12\7\1\0\2\7\2\41\14\0\1\7\1\0" +
      "\2\7\1\0\17\7\1\72\3\7\1\0\2\7\2\41" +
      "\14\0\1\7\1\0\2\7\1\0\17\7\1\73\3\7" +
      "\1\0\2\7\2\41\14\0\1\7\1\0\2\7\1\0" +
      "\3\7\1\74\17\7\1\0\2\7\2\41\14\0\1\7" +
      "\12\0\1\75\10\0\1\76\41\0\1\77\7\0\1\100" +
      "\34\0\1\101\72\0\1\102\17\0\2\7\1\0\11\7" +
      "\1\103\11\7\1\0\2\7\2\41\14\0\1\7\1\0" +
      "\2\7\1\0\1\104\22\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\23\7\1\0\1\7\1\105" +
      "\2\41\14\0\1\7\1\0\2\7\1\0\3\7\1\106" +
      "\17\7\1\0\2\7\2\41\14\0\1\7\1\0\2\7" +
      "\1\0\7\7\1\107\13\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\11\7\1\110\11\7\1\0" +
      "\2\7\2\41\14\0\1\7\1\0\2\7\1\0\12\7" +
      "\1\111\10\7\1\0\2\7\2\41\14\0\1\7\1\0" +
      "\2\7\1\0\13\7\1\112\7\7\1\0\2\7\2\41" +
      "\14\0\1\7\1\0\2\7\1\0\11\7\1\106\11\7" +
      "\1\0\2\7\2\41\14\0\1\7\1\0\2\7\1\0" +
      "\5\7\1\113\15\7\1\0\2\7\2\41\14\0\1\7" +
      "\1\0\2\7\1\0\10\7\1\114\12\7\1\0\2\7" +
      "\2\41\14\0\1\7\1\0\2\7\1\0\15\7\1\67" +
      "\5\7\1\0\2\7\2\41\14\0\1\7\30\0\1\115" +
      "\43\0\1\116\37\0\1\117\46\0\1\115\55\0\1\120" +
      "\34\0\2\7\1\0\12\7\1\121\10\7\1\0\2\7" +
      "\2\41\14\0\1\7\1\0\2\7\1\0\12\7\1\122" +
      "\10\7\1\0\2\7\2\41\14\0\1\7\1\0\2\7" +
      "\1\0\4\7\1\123\16\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\10\7\1\124\12\7\1\0" +
      "\2\7\2\41\14\0\1\7\1\0\2\7\1\0\12\7" +
      "\1\125\10\7\1\0\2\7\2\41\14\0\1\7\1\0" +
      "\2\7\1\0\23\7\1\0\1\7\1\126\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\20\7\1\127\2\7\1\0" +
      "\2\7\2\41\14\0\1\7\1\0\2\7\1\0\3\7" +
      "\1\130\17\7\1\0\2\7\2\41\14\0\1\7\21\0" +
      "\1\131\46\0\1\132\61\0\1\133\44\0\1\134\25\0" +
      "\2\7\1\0\17\7\1\135\3\7\1\0\2\7\2\41" +
      "\14\0\1\7\1\0\2\7\1\0\6\7\1\136\14\7" +
      "\1\0\2\7\2\41\14\0\1\7\1\0\2\7\1\0" +
      "\5\7\1\130\15\7\1\0\2\7\2\41\14\0\1\7" +
      "\1\0\2\7\1\0\11\7\1\137\11\7\1\0\2\7" +
      "\2\41\14\0\1\7\1\0\2\7\1\0\5\7\1\140" +
      "\15\7\1\0\2\7\2\41\14\0\1\7\1\0\2\7" +
      "\1\0\15\7\1\141\5\7\1\0\2\7\2\41\14\0" +
      "\1\7\1\0\2\7\1\0\6\7\1\142\14\7\1\0" +
      "\2\7\2\41\14\0\1\7\15\0\1\143\51\0\1\144" +
      "\42\0\1\145\41\0\2\7\1\0\14\7\1\146\6\7" +
      "\1\0\2\7\2\41\14\0\1\7\1\0\2\7\1\0" +
      "\12\7\1\130\10\7\1\0\2\7\2\41\14\0\1\7" +
      "\1\0\2\7\1\0\11\7\1\147\11\7\1\0\2\7" +
      "\2\41\14\0\1\7\1\0\2\7\1\0\13\7\1\150" +
      "\7\7\1\0\2\7\2\41\14\0\1\7\14\0\1\151" +
      "\51\0\1\131\56\0\1\131\26\0\2\7\1\0\15\7" +
      "\1\152\5\7\1\0\2\7\2\41\14\0\1\7\1\0" +
      "\2\7\1\0\12\7\1\153\10\7\1\0\2\7\2\41" +
      "\14\0\1\7\1\0\2\7\1\0\17\7\1\154\3\7" +
      "\1\0\2\7\2\41\14\0\1\7\15\0\1\155\34\0" +
      "\2\7\1\0\14\7\1\130\6\7\1\0\2\7\2\41" +
      "\14\0\1\7\1\0\2\7\1\0\4\7\1\156\16\7" +
      "\1\0\2\7\2\41\14\0\1\7\10\0\1\157\41\0" +
      "\2\7\1\0\21\7\1\147\1\7\1\0\2\7\2\41" +
      "\14\0\1\7\17\0\1\145\31\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[3649];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\3\1\1\4\3\2\1\7\11\2\1" +
      "\1\11\1\1\2\11\1\1\3\3\1\1\1\15\10\3" +
      "\3\0\1\1\3\11\14\3\5\0\1\11\12\3\4\0" +
      "\10\3\1\11\3\0\6\3\3\0\3\3\1\0\3\3" +
      "\1\0\1\3\1\0";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * this buffer may contains the current text array to be matched when it is cheap to acquire it
   */
  private char[] zzBufferArray;

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the textposition at the last state to be included in yytext
   */
  private int zzPushbackPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /* user code: */
  public _AopLexer() {
    this((Reader)null);
  }


  public _AopLexer(Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public _AopLexer(InputStream in) {
    this(new InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1748) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzBufferArray = CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState) {
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws IOException if any I/O-Error occurs
   */
  public IElementType advance() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 2) == 2)
            zzPushbackPosL = zzCurrentPosL;

          if ((zzAttributes & 1) == 1) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: {
          if (yystate() != ANNO_PATTERN) {
            yybegin(AFTER_DOT);
          }
          return AopElementTypes.AOP_DOT;
        }
        case 29:
          break;
        case 19: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_OR;
        }
        case 30:
          break;
        case 6: {
          if (yystate() != ANNO_PATTERN) {
            yybegin(PATH_ELEMENT);
          }
          return AopElementTypes.AOP_ASTERISK;
        }
        case 31:
          break;
        case 24: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_MODIFIER;
        }
        case 32:
          break;
        case 10: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_LT;
        }
        case 33:
          break;
        case 9: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_COMMA;
        }
        case 34:
          break;
        case 27: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_THROWS;
        }
        case 35:
          break;
        case 2: {
          return AopElementTypes.AOP_IDENTIFIER;
        }
        case 36:
          break;
        case 23: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_BOOLEAN_LITERAL;
        }
        case 37:
          break;
        case 1: {
          yybegin(YYINITIAL);
          return AopElementTypes.BAD_CHARACTER;
        }
        case 38:
          break;
        case 12: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_NOT;
        }
        case 39:
          break;
        case 28: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_EXTENDS;
        }
        case 40:
          break;
        case 21: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_VARARGS;
        }
        case 41:
          break;
        case 11: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_GT;
        }
        case 42:
          break;
        case 18: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_AND;
        }
        case 43:
          break;
        case 16: {
          yybegin(YYINITIAL);
          return AopElementTypes.ANNO_WHITE_SPACE;
        }
        case 44:
          break;
        case 8: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_RIGHT_PAR;
        }
        case 45:
          break;
        case 17: {
          if (yystate() != ANNO_PATTERN) {
            yybegin(AFTER_DOT);
          }
          return AopElementTypes.AOP_DOT_DOT;
        }
        case 46:
          break;
        case 3: {
          yybegin(YYINITIAL);
          return AopElementTypes.WHITE_SPACE;
        }
        case 47:
          break;
        case 15: {
          return AopElementTypes.WHITE_SPACE;
        }
        case 48:
          break;
        case 13: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_PLUS;
        }
        case 49:
          break;
        case 7: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_LEFT_PAR;
        }
        case 50:
          break;
        case 26: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_SUPER;
        }
        case 51:
          break;
        case 25: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_IDENTIFIER;
        }
        case 52:
          break;
        case 22: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_NEW;
        }
        case 53:
          break;
        case 20: {
          yybegin(YYINITIAL);
          return AopElementTypes.AOP_BRACES;
        }
        case 54:
          break;
        case 4: {
          yybegin(ANNO_PATTERN);
          return AopElementTypes.AOP_AT;
        }
        case 55:
          break;
        case 14: {
          yybegin(AFTER_QUESTION);
          return AopElementTypes.AOP_QUESTION;
        }
        case 56:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
