model.property.error.message=Cannot resolve property ''{0}''
model.property.error.message.descendants.missing=Not all inheriting beans have property ''{0}''
model.property.error.message.descendants.incompatible=Inheriting beans have different types for property ''{0}''
model.property.quickfix.message=Create new property ''{0}''
model.create.factory.method.quickfix.message=Create factory method ''{0}''
model.create.constructor.quickfix.message=Create constructor ''{0}''
model.add.constructor.args.for.method.quickfix.message=Add <constructor-arg>(s) for ''{0}''

model.bean.error.message=Cannot resolve bean ''{0}''
model.bean.quickfix.family=Spring model quick fixes
model.bean.quickfix.create.property=Create new property from p-namespace usage
model.bean.quickfix.message=Create new bean ''{0}''

model.inspection.group.name=Spring Model
model.inspection.display.name=Spring Model
model.inspection.display.bean.name.convention=Spring Bean Names Convention
model.inspection.bean.property.value=Injection Value Type
model.inspection.bean.constructor.arg=Constructor Tag Injection
model.inspection.bean.autowiring=Spring Bean Autowiring
model.inspection.bean.dependency.check=Spring Bean Dependency Check
model.inspection.validator.description.text=Spring Model Validator
model.inspection.validator.progress.text=Validating Spring Model...

scopes.inspection.display.name=Spring Scopes

aop.errors.inspection.display.name=Spring AOP Errors
aop.warnings.inspection.display.name=Spring AOP Warnings
missing.aspectj.autoproxy.inspection.display.name=Missing aspectj-autoproxy
aop.quickfix.define.0.attr=Define {0} attribute
aop.warning.aspectj.isnt.enabled=@AspectJ support isn't enabled
aop.enable.aspectj.fix.text=Add <aop:aspectj-autoproxy/> to Spring config
aop.advice.matching.aspect.bean=Some advices are matching this bean

model.inspection.invalid.identifier.message=''{0}'' is not an identifier
model.inspection.invalid.lowercase.name.message=''{0}'' should be started with a lowercase letter

model.inspection.bean.factory.method=Spring Bean Factory Method
method.must.be.static=Factory  method ''{0}'' must be static
method.must.not.be.static=Factory  method ''{0}'' must not be static
method.must.be.public=Factory  method ''{0}'' must be public
method.cannot.instantiate.bean=Factory  method ''{0}'' cannot instantiate bean

bean.dependency.check.message=You must set bean properties({0}) or disable dependency checking for this bean

bean.autowiring.by.type.none=Could not autowire. No beans of ''{0}'' type found.
bean.autowiring.by.type=Could not autowire. There are more than one bean of ''{0}'' type. Beans: {1}. Properties: ''{2}''
bean.class.autowired.by.type=Could not autowire. There are more than one bean of ''{0}'' type. Beans: {1}.
bean.class.autowired.incorrect.qualifier.type=Could not autowire. Qualified bean must be of ''{0}'' type.
bean.class.unknown.qualifier.bean=Cannot find bean with qualifier ''{0}''

bean.must.be.of.type=Bean must be of ''{0}'' type
bean.must.be.of.types=Bean must be of ''{0}'' or ''{1}'' type
bean.must.be.one.of.this.types=Bean must be one of this types: {0}
bean.must.be.public=Bean must be public
bean.bad.property.type=Property of ''{0}'' type cannot be injected by ''{1}''
bean.bad.constructor.arg.type=Constructor argument of ''{0}'' type cannot be injected by ''{1}''
idref.cannot.be.added.in.collection=Cannot be added in collection of ''{0}'' type
cannot.find.customNs.jar=Error loading customNs.jar which is necessary to run Spring custom namespace handlers
timeout.parsing.bean=Custom bean parsing took too long
process.unexpectedly.terminated=Process unexpectedly terminated{0}
try.parsing.custom.beans=Try parsing custom beans

cannot.find.bean.constructor.with.parameters.count=No matching constructor found in class ''{0}''
cannot.find.factory.method.with.parameters.count=No matching factory method found in class ''{0}''

cannot.find.constructor.arg.index=Cannot find constuctor with argument index {0}
cannot.find.constructor.arg.index.in.class=Cannot find constuctor with argument index {0} in class {1}
cannot.find.factory.method.index=Cannot find factory method with argument index {0} in class {1}

incorrect.constructor.arg.index=Index must be less than ''{0}''
incorrect.constructor.arg.index.not.unique=Index must be unique
constructor.arg.must.be.of.type=Must be of ''{0}'' type
constructor.arg.incorrect.value.type=Injected value type must correspond to constructor arg type

spring.bean=Spring Bean
spring.property=Spring Property
spring=Spring

config.add.set.button=New File Set...
config.remove.button=Remove
config.display.name=Configuration
config.edit.button=Edit File Set...

config.input.fileset=Fileset &name:
config.input.fileset.title=New Fileset
config.remove.button.message=Do you really want to remove the file set "{0}"? (No files will be physically deleted)
config.remove.button.title=Remove
config.libraries.editor.display.name=Spring Libraries
config.fileset.editor.title=Edit File Set

spring.bean.structure.perspective=Structure
spring.beans.dependencies=Dependencies

spring.bean.dependency.graph.node.unknown=unknown
spring.bean.dependency.graph.edge.injected=depends on
spring.bean.dependency.graph.edge.creates=creates
spring.bean.dependency.graph.edge.depends.on=depends on
spring.bean.dependency.graph.edge.autowired=autowired
spring.bean.dependency.graph.edge.anno.autowired=@Autowired
spring.bean.dependency.graph.edge.inherits=inherits

spring.bean.dependency.graph.action.show.autowired=Show autowired dependencies
spring.bean.dependency.graph.action.show.fileset.model=Show fileset model
spring.bean.dependency.graph.action.group.beans=Group beans
spring.bean.class.tooltip.navigate.declaration=Navigate to the spring bean declaration(s)
navigate.to.autowired.dependencies=Navigate to the autowired dependencies

spring.bean.class.navigate.choose.class.title=Choose bean
spring.bean.property.tooltip.navigate.declaration=Navigate to the spring bean property declaration in XML
spring.bean.property.navigate.choose.class.title=Choose bean containing the property
spring.bean.with.unknown.name=<anonymous bean>

config.file.not.found=File not found
config.file.is.not.spring=The file is not recognized as Spring configuration
config.locate.button=Locate File...
config.options.validation.caption= Validation
config.options.validation.show.errors.as.warnings=Show errors as warnings
config.options.validation.enable=Enable Spring model validation on build
config.options.display.name=Options
config.features.version=Spring version:
config.features.display.name=Spring Features

spring.bean.lookup.method.inspection=Lookup Method
spring.bean.lookup.method.incorrect.return.type=Incorrect lookup method return type
spring.bean.lookup.method.constructor.not.allowed=Constructor is not allowed here
spring.bean.lookup.method.return.type.mismatch=Lookup method return type does not match the ''{0}'' bean class
spring.bean.lookup.method.bean.has.no.class='{0}' bean has no class
spring.bean.lookup.method.must.be.public.or.protected=Method must be public or protected
spring.bean.lookup.method.must.have.no.parameters=Method must have no parameters
spring.bean.lookup.method.must.be.not.static=Static method not allowed here

spring.bean.replace.methods.inspection=Replaced Methods
spring.bean.replaced.method.must.implement.MethodReplacer=Bean class must implement ''org.springframework.beans.factory.support.MethodReplacer''

model.inspection.injection.value.style=Spring Injection Value Style
model.inspection.injection.value.style.message=Usage of explicit <value> element
model.inspection.injection.value.style.value.fix=Replace <value> element with "{0}" attribute
model.inspection.injection.value.style.ref.fix=Replace <ref> element with "{0}" attribute
model.inspection.injection.value.style.ref.message=Usage of explicit <ref> element

model.inspection.placeholder.values=Placeholder String Values Injection
model.inspection.hard.coded.string.literal=Hard coded string literal: ''{0}''
model.inspection.string.constant.move.to.placeholder=Move to placeholder
model.intention.string.constant.move.to.placeholder=Move to placeholder

spring.bean.value.converter.format.exception=Cannot convert string ''{0}'' to target class ''{1}''
spring.bean.value.converter.format.exception.empty.string=Cannot convert empty string to target class ''{0}''
model.inspection.bean.parent.inspection=Parent Bean

spring.bean.property=Property
spring.bean.constructor.arg=Constructor argument
spring.bean.map.entry=Map entry

model.inspection.injection.value.consistency=Injection Value Consistency
model.inspection.injection.value.message={0} must specify a ref or value
spring.bean.property.value.inconsistency.ref.or.value.subelemet.must.defined={0} is only allowed to contain either "ref" attribute OR "value" attribute OR sub-element
spring.bean.property.value.inconsistency.more.one.subelement ={0} must not contain more than one sub-element
spring.bean.ref.attributes.inconsistency=<ref> tag is only allowed to contain either "bean" attribute OR "local" attribute OR "parent" attribute
spring.bean.ref.attributes.must.specify=<ref> tag must specify a bean
spring.bean.idref.attributes.inconsistency=<idref> tag is only allowed to contain either "bean" attribute OR "local" attribute
spring.bean.idref.attributes.must.specify=<idref> tag must specify a bean
model.inspection.injection.value.entry.key=Map entry must specify a key
spring.bean.property.value.inconsistency.key=Map entry is only allowed to contain either "key" attribute OR "key-ref" attribute OR <key> sub-element

model.inspection.injection.value.add.value=Add "value" attribute
model.inspection.injection.value.add.ref=Add "ref" attribute
model.inspection.injection.value.add.list=Add <list> tag
model.inspection.injection.value.add.set=Add <set> tag
model.inspection.injection.value.add.map=Add <map> tag


spring.bean.abstract.bean.references.inspection=Abstract Beans References
spring.bean.referenced.by.abstract.bean=Abstract bean cannot be used here

spring.bean.autowire.escape.inspection.name=Autowired Dependencies
spring.bean.use.autowire=Unnecessary use of autowired dependencies
spring.bean.autowire.escape=Make autowired dependencies explicit

spring.bean.duplicated.bean.name.inspection=Duplicate Bean Name
spring.bean.dublicate.bean.name=Bean name duplicated
spring.bean.dublicate.bean.id.name=Bean name is already used
spring.alias.cycles=There are cycles in alias definitions
spring.alias.dublicate.name=Alias with such name is already defined

spring.bean.instantiation.by.factory=Spring Bean (instantiated by a factory)
spring.bean.instantiation.using.factory.method=Spring Bean (instantiated by a static factory method)
spring.import=Import
spring.generate.properties=Properties...
spring.generate.setter.dependencies=Setter Dependency...
spring.generate.constructor.dependencies=Constructor Dependency...
action.Spring.Beans.Generate.Setter.Dependency.Action.text=Spring Setter Dependency...
action.Spring.Beans.Generate.Constructor.Dependency.Action.text=Spring Constructor Dependency...
spring.bean.properties.chooser.title=Choose properties
spring.bean.dependencies.chooser.title=Choose bean
spring.beans.chooser.show.context.files=Show context files
spring.beans.chooser.all.context.files=All beans
spring.beans=Beans
show.properties.and.constructor.args=Show properties and constructor arguments
util.schema.inspection.name=Util Schema
util.requred.class.message=Class must be inheritor of ''{0}''

create.spring.context.file.dtd.1.0=Spring 1.x DTD
create.spring.context.file.dtd.2.0=Spring 2.x DTD
create.spring.context.file.schema.2.0=Spring 2.x XSD

prompt.enter.new.spring.context.file.mame=Enter new spring context file name
cannot.create.spring.context.file=Cannot create spring context file

spring.bean.instantiation.inspection=Spring Bean Instantiation
mark.bean.as.abstract=Mark bean as abstract
abstract.class.not.allowed=Abstract class not allowed
interface.not.allowed=Interface not allowed
spring.parent.bean.tooltip=Navigate to the child declarations

spring.patterns.group.name=Patterns
spring.template.beans=Template Beans

spring.patterns=Patterns
spring.patterns.hibernate=Hibernate
spring.patterns.jpa=JPA
spring.patterns.jdo=JDO
spring.patterns.toplink=Toplink
spring.patterns.ibatis=iBatis
spring.patterns.quartz.scheduler=OpenSymphony Scheduler
spring.patterns.jdk.timer=JDK Timer

spring.patterns.aop.group.name=Aop
spring.patterns.data.access.group.name=Data Access
spring.patterns.integration.group.name=Integration
spring.patterns.scheduling.group.name=Scheduling
spring.patterns.common.beans.group.name=Common Beans
spring.patterns.webflow.group.name=Webflow
spring.patterns.osgi.group.name=Dynamic Modules
spring.patterns.data.access.hibernate.session.factory=Hibernate Session Factory
spring.patterns.data.access.hibernate.transaction.manager=Hibernate Transaction Manager

spring.patterns.data.access.jdo.persistence.manager=JDO Persistence Manager Factory
spring.patterns.data.access.jdo.jpox.persistence.manager=JPOX Persistence Manager  Factory
spring.patterns.data.access.jdo.persistence.manager.proxy=JDO Persistence Manager Proxy
spring.patterns.data.access.jdo.transaction.manager=JDO Transaction Manager

spring.patterns.data.access.toplink.session.factory=Toplink Session Factory
spring.patterns.data.access.toplink.transaction.aware.session.adapter=Toplink Transaction Aware Session Adapter
spring.patterns.data.access.toplink.transaction.manager=Toplink Transaction Manager
spring.patterns.data.access.ibatis.client.factory=iBatis SqlMapClient Factory

spring.patterns.data.access.jpa.entity.manager.factory=JPA Entity Manager Factory Bean
spring.patterns.data.access.jpa.container.entity.manager.factory=JPA Container Entity Manager Factory Bean
spring.patterns.data.access.jpa.persistence.unit.manager=JPA Persistence Unit Manager
spring.patterns.data.access.jpa.persistence.anno.posr.processor=JPA Annotation Bean Post Processor
spring.patterns.data.access.jpa.persistence.ex.translation.posr.processor=JPA Exception Translation Post Processor

spring.patterns.data.access.data.source=Data Source
spring.patterns.data.access.jndi.data.source=Jndi Data Source
spring.patterns.data.access.transaction.manager=Transaction Manager
spring.patterns.data.access.jpa.transaction.manager=Transaction Manager

spring.patterns.aop.auto.proxy.creator=AspectJ Auto Proxy Creator
spring.patterns.aop.auto.proxy=Aop: AspectJ Auto Proxy

spring.patterns.integration.opensymphony.job.detail.bean=OpenSymphony Job Detail Bean
spring.patterns.integration.opensymphony.method.invoking.factory.bean=OpenSymphony Method Invoking Factory
spring.patterns.integration.opensymphony.simple.trigger=OpenSymphony Simple Trigger
spring.patterns.integration.opensymphony.cron.trigger=OpenSymphony Cron Trigger
spring.patterns.integration.opensymphony.scheduler=OpenSymphony Scheduler Factory Bean

spring.patterns.integration.jdk.scheduled.timer.task=JDK scheduled timer task
spring.patterns.integration.jdk.timer.factory.bean=JDK Timer Factory Bean
spring.patterns.integration.jdk.method.invoking.factory.bean=JDK Method Invoking Timer Task Factory

spring.patterns.integration.ejb.local.stateles.session.bean=EJB Local Stateless Session Bean
spring.patterns.integration.ejb.remote.stateles.session.bean=EJB Remote Stateless Session Bean
spring.patterns.integration.free.marker.factory.bean=Free Marker Configuration Factory Bean

spring.patterns.common.beans.placeholder=Property Placeholder Configurer
spring.patterns.common.beans.property.override.configurer=Property Override Configurer
spring.patterns.factory.beans.resource=Resource Factory Bean
spring.patterns.factory.beans.commons.log=Commons Log Factory Bean
spring.patterns.factory.beans.set=Set Factory Bean
spring.patterns.factory.beans.list=List Factory Bean
spring.patterns.factory.beans.map=Map Factory Bean
spring.patterns.factory.beans.properties=Properties Factory Bean
spring.patterns.factory.beans.field.retrieving=Field Retrieving Factory Bean

spring.patterns.webflow.registry=Flow Registry
spring.patterns.webflow.executor=Flow Executor
spring.patterns.webflow.builder.services=Flow Builder Executor

spring.patterns.osgi.service=Service
spring.patterns.osgi.multiple.service=Service(multiple interfaces) 
spring.patterns.osgi.ref=Reference
spring.patterns.osgi.multiple.ref=Reference(multiple interfaces)
spring.patterns.osgi.ref.with.listener=Reference(specify listener)
spring.patterns.osgi.ref.with.bean=Reference(specify bean)

spring.patterns.osgi.list=List
spring.patterns.osgi.list.comparator=List(with comparator) 
spring.patterns.osgi.set=Set
spring.patterns.osgi.set.comparator=Set(with comparator)

spring.patterns.webflow.services.conversion.service=Conversation Service
spring.patterns.webflow.services.expression.parser=Expression Parser
spring.patterns.webflow.services.view.factory.creator=View Factory Creator
spring.patterns.webflow.services.view.formatter.registry=Formatter Registry
spring.patterns.webflow.execution.listener=Flow Execution Listener

spring.choose.bean.templates.dialog.title=Add {0} Beans

config.edit.files.tab=Configuration Files
config.edit.dependencies=Dependencies
mvc.0.servlet.context.autodetected=MVC ''{0}'' servlet context (autodetected)
default.fileset.name=My Fileset

available.custom.namespace.handlers=Specify which custom namespaces should be validated 

config.new.file=Spring Config
config.new.file.name=&File name:
config.new.file.fileset=File&set:
config.new.file.schema=Schema:
config.new.file.directory=&Directory:
config.new.file.browse.title=Choose Folder
create.new.spring.configuration.file=Create new Spring configuration file
config.new.fileset.name=New Fileset
config.new.config.button=New Config File...
config.fileset.autodetected= (autodetected)

spring.java.configuration.inspection.cannot.find.external.bean=Cannot find external bean
spring.java.configuration.inspection.class.type.expected=Class type expected
spring.java.configuration.inspection.incorrect.return.type.of.external.bean=Incorrect return type. {0} is expected

error.pointcut.or.pointcut.ref.should.be.defined=Either pointcut or pointcut-ref attribute should be defined
warning.pointcut.should.have.id=Pointcut should have id
cannot.resolve.method=Cannot resolve method ''{0}''
spring.resource.ant.style.reference.error.message=Cannot find matching files
spring.java.configuration.inconsistency.inspection.name=Java Config Inconsistency Errors
spring.java.configuration.inspection.name=Java Configured @ExternalBean Errors

framework.title.spring=&Spring
this.pointcut.designator.isn.t.supported.by.spring={0} pointcut designator isn''t supported by Spring
config.input.parent.fileset=&Parent fileset:
fileset.none=<none>
fileset.new=<new fileset>
enter.new.fileset.name=Enter a new fileset name:
new.fileset.name=New Fileset Name

spring.facet.inspection=Spring Extension
spring.facet.not.configured.for.module=Spring extension is not enabled for module ''{0}''
add.spring.facet=Enabled Spring extension in module ''{0}''
file.set.not.configured.for.file=File set not configured for the file
configure.file.set.for.file=Configure file set for the file
choose.file.set=Choose file set
spring.facet.inspection.check.test.files=Check test files

introduce.bean.intention=Introduce Bean

parse.custom.bean.intention=Parse custom bean
parsing.custom.bean=Running custom Spring bean handlers... 
parse.custom.bean.error=Error parsing custom bean
parse.custom.bean.success=Custom handler has finished successfully
parse.no.custom.beans=Parser produced no beans 
parse.only.infrastructure.beans=Parser produced only infrastructure beans 
parse.these.beans=Custom namespace handler produced the following bean definitions:\n{0}
parse.these.beans.induct=Custom namespace handler produced the following bean definition:\n{0}\n\n\
  Do you want IntelliJ IDEA to assume that all beans \n\
  from namespace ''{1}'' with local name ''{2}''\n\
  have the same Java class and take their id from ''{3}'' attribute?\n
parse.these.beans.induct.only.this=&No, only this bean
parse.no.namespace.handler=Cannot find custom handler for namespace {0}
unparsed.custom.bean.inspection=Unparsed custom Spring beans 
unparsed.custom.bean.message=This custom Spring bean has not yet been parsed
custom.bean.no.id=IntelliJ IDEA can't find this bean's id in config file. Renaming will probably produce\nincorrect code. Do you want to proceed?
custom.bean.no.id.title=Warning

spring.refactoring=Spring Refactorings
spring.refactorings=Spring Refactorings
choose.config.file=Choose Configuration File
do.you.want.to.move.bean.to.the.top.level=Do you want to move the bean to the top level?
move.bean.to.the.top.level=Move Bean To the Top Level
choose.configuration.file=Choose Configuration File
move.bean=Move Bean
move.bean.label=To file:
move.bean.name=Move bean ''{0}''
update.schema.intention=Update XML schema to spring-beans-2.0.xsd
use.p.namespace=Convert to p-namespace
xml.schema.will.be.updated=XML schema will be updated to spring-beans.xsd. \nDo you want to proceed?
xml.schema.update.is.required=XML schema update is required

model.qualifiers.in.class.inspection.display.name=Autowiring for Bean Class
required.properties.inspection=Required Annotation
required.property.not.mapped=Required property ''{0}'' is not injected
create.missing.mappings=Create missing mappings for ''{0}''

spring.required.property.inspection=Required Properties
required.properties.missed=Required properties missed: {0}
create.missing.properties=Create missing properties
spring.bean.dependency.graph.action.show.simple.mode=Simple view
cannot.find.bean.qualified.by=Cannot find bean qualified with {0}
jdk.proxy.intercepts.class=Bean must implement one of ''{0}'' interfaces: ''{1}''
use.cglib.proxying=Use CGLIB proxying
cannot.autowire.bean.of.type=Could not autowire. Bean should be of ''{0}'' type
java.configuration.cannot.be.final=@Configuration class may not be final
java.configuration.must.have.default.constructor=Configuration classes must have a default/no-arg constructor
java.configuration.autowired.constructor.param=@Configuration class may not use @Autowired constructor
java.config.bean.method.cannot.return.void=@Bean methods must be non-void
java.config.bean.method.cannot.be.final=@Bean methods must be non-final
java.config.bean.method.cannot.be.private==@Bean methods must be non-private
java.config.bean.method.cannot.has.arguments=@Bean methods may not accept any arguments
java.config.bean.must.be.declared.inside.configuration=@Bean methods are valid only when declared within a @Configuration annotated class, or @Import
required.spring.bean.type.inspection=Required Bean Type Inspection
bean.dependencies.popup.title=Dependencies of ''{0}'' bean
generating.bean.dependencies.diagramm=Generating bean dependencies  diagram
show.bean.dependencies.diagramm=Show Bean Depenedencies Diagram
security.role.type=Security Role
