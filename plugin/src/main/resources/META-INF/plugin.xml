<?xml version="1.0" encoding="utf-8"?>
<consulo-plugin url="https://github.com/consulo/incubating-consulo-spring">
	<id>com.intellij.spring</id>
	<name>Spring Support</name>
	<description>Spring Support</description>
	<category>Web/JavaEE Technologies</category>
	<version>SNAPSHOT</version>
	<vendor>JetBrains &amp; consulo.io</vendor>

	<resource-bundle>resources.messages.SpringBundle</resource-bundle>

	<depends>com.intellij.properties</depends>
	<depends>consulo.java</depends>
	<depends>com.intellij.xml</depends>

	<import path="/META-INF/aop.xml"/>

	<tags>
		<tag>software.framework</tag>
		<tag>web.framework</tag>
	</tags>

	<experimental>true</experimental>

	<!--<depends optional="true" config-file="spring-javaee-integration.xml">com.intellij.javaee</depends>
	<depends optional="true" config-file="spring-jsf-integration.xml">JSF</depends>
	<depends optional="true" config-file="spring-js.xml">JavaScript</depends>
	<depends optional="true" config-file="spring-tiles-integration.xml">StrutsAssistant</depends> -->

	<extensionPoints>
		<extensionPoint name="modelProvider" interface="com.intellij.spring.SpringModelProvider"/>
		<extensionPoint name="effective.types.provider" interface="com.intellij.spring.model.SpringBeanEffectiveTypeProvider"/>

		<extensionPoint name="aop.provider" interface="com.intellij.aop.AopProvider" />

		<!-- <extensionPoint name="mvcViewProvider" interface="com.intellij.spring.web.mvc.MVCViewProvider"/> -->
	</extensionPoints>

	<extensions defaultExtensionNs="com.intellij.spring">
		<modelProvider implementation="consulo.spring.boot.SpringBootModelProvider"/>

		<aop.provider implementation="com.intellij.spring.aop.SpringAopProvider"/>
	</extensions>

	<extensions defaultExtensionNs="com.intellij">
		<elementDescriptionProvider implementation="com.intellij.spring.model.jam.javaConfig.SpringJamPomTargetDescriptionProvider"/>
		<semContributor implementation="com.intellij.spring.model.jam.SpringSemContributor"/>

		<renameHandler implementation="com.intellij.spring.model.properties.SpringPropertyRenameHandler"/>
		<renameHandler implementation="com.intellij.spring.model.highlighting.jam.SpringExternalBeanRenameHandler"/>
		<renameHandler implementation="com.intellij.spring.model.highlighting.jam.SpringExternalBeanReferencesRenameHandler"/>
		<renameHandler implementation="com.intellij.spring.model.xml.custom.SpringCustomBeanRenameHandler"/>

		<completion.contributor language="XML" implementationClass="com.intellij.spring.model.converters.SpringCompletionContributor"/>

		<findUsagesHandlerFactory implementation="com.intellij.spring.SpringFindUsagesHandlerFactory"/>

		<multiHostInjector forClass="com.intellij.psi.xml.XmlAttributeValue" implementationClass="com.intellij.spring.aop.SpringAopInjector"/>
		<multiHostInjector forClass="com.intellij.psi.xml.XmlAttribute" implementationClass="com.intellij.spring.aop.SpringAopInjector"/>

		<projectService serviceInterface="com.intellij.spring.SpringManager"
						serviceImplementation="com.intellij.spring.impl.SpringManagerImpl"/>
		<projectService serviceInterface="com.intellij.spring.CustomBeanRegistry"
						serviceImplementation="com.intellij.spring.CustomBeanRegistry"/>

		<!--<compiler.inspectionValidator implementation="com.intellij.spring.model.highlighting.SpringValidator"/> -->
		<annotator language="JAVA" implementationClass="com.intellij.spring.gutter.SpringClassAnnotator"/>
		<annotator language="XML" implementationClass="com.intellij.spring.model.highlighting.SpringDomAnnotator"/>
		<codeInsight.lineMarkerProvider language="XML" implementationClass="com.intellij.spring.aop.SpringAopAnnotator"/>
		<fileStructureGroupRuleProvider implementation="com.intellij.spring.usages.SpringBeanGroupRuleProvider"/>

		<referencesSearch implementation="com.intellij.spring.aop.SpringAopParameterReferencesSearcher"/>

		<spring.effective.types.provider implementation="com.intellij.spring.model.SpringFactoryBeansEffectiveTypesProviders" id="factory" order="first"/>
		<spring.effective.types.provider implementation="com.intellij.spring.aop.SpringAopEffectiveTypesProvider"/>

		<typeDeclarationProvider implementation="com.intellij.spring.SpringTypeDeclarationProvider"/>

		<renameInputValidator implementation="consulo.spring.SpringRenameInputValidator"/>

		<moduleService serviceInterface="com.intellij.spring.model.jam.SpringJamModel" serviceImplementation="com.intellij.spring.model.jam.SpringJamModel"/>

		<projectService serviceInterface="com.intellij.spring.model.actions.patterns.frameworks.util.StandardBeansDocLinksManager"
						serviceImplementation="com.intellij.spring.model.actions.patterns.frameworks.util.StandardBeansDocLinksManager"/>
		<projectService serviceInterface="com.intellij.spring.model.actions.patterns.frameworks.util.LibrariesConfigurationManager"
						serviceImplementation="com.intellij.spring.model.actions.patterns.frameworks.util.LibrariesConfigurationManager"/>

		<psi.referenceContributor implementation="com.intellij.spring.references.SpringReferenceContributor"/>
		<refactoring.moveHandler implementation="com.intellij.spring.refactoring.SpringBeanMoveHandler"/>
		<refactoring.inlineHandler language="XML" implementationClass="com.intellij.spring.refactoring.SpringInlineHandler"/>

		<gotoSymbolContributor implementation="com.intellij.spring.model.gotoSymbol.GotoSpringBeanProvider"/>

		<psi.referenceContributor implementation="com.intellij.spring.references.SpringQualifierNameContributor"/>
		<psi.referenceContributor implementation="com.intellij.spring.references.SpringStereotypesNameContributor"/>

		<completion.contributor language="PointcutExpression" implementationClass="com.intellij.aop.psi.SpringAopCompletionContributor" order="before aop"/>

		<implicitUsageProvider implementation="com.intellij.spring.java.providers.SpringImplicitUsageProvider"/>

		<typeName className="com.intellij.spring.model.jam.qualifiers.SpringJamQualifier" name="@Qualifier"/>
		<typeName className="com.intellij.spring.model.jam.stereotype.SpringService" name="@Service"/>
		<typeName className="com.intellij.spring.model.jam.stereotype.SpringRepository" name="@Repository"/>
		<typeName className="com.intellij.spring.model.jam.stereotype.SpringController" name="@Controller"/>
		<typeName className="com.intellij.spring.model.jam.stereotype.SpringComponent" name="@Component"/>
		<typeName className="com.intellij.spring.model.xml.beans.SpringProperty" resourceBundle="messages.SpringBundle" resourceKey="spring.property"/>

		<typeIcon className="Beans.class" icon="/resources/icons/beans.png"/>
		<typeIcon className="SpringBean.class" icon="/resources/icons/springBean.png"/>
		<typeIcon className="PsiMethod.class" icon="AllIcons.Nodes.Method"/>
		<typeIcon className="SpringBeanScope.class" icon="/resources/icons/springBeanScope.png"/>
		<typeIcon className="SpringProperty.class" icon="/resources/icons/springProperty.png"/>
		<typeIcon className="BeanProperty.class" icon="/resources/icons/springProperty.png"/>
		<typeIcon className="SpringImport.class" icon="/resources/icons/springConfig.png"/>

		<moduleExtensionProvider icon="consulo.spring.SpringImplIconGroup@spring"
								 key="spring"
								 name="Spring"
								 parentKey="java"
								 immutableClass="consulo.spring.module.extension.SpringModuleExtensionImpl"
								 mutableClass="consulo.spring.module.extension.SpringMutableModuleExtensionImpl"/>

		<fileTemplateGroup implementation="com.intellij.spring.SpringBeansTemplatesFactory" />

		<inspectionToolProvider implementation="consulo.spring.SpringInspectionToolProvider" />

		<defaultLiveTemplatesProvider implementation="consulo.spring.SpringDefaultLiveTemplatesProvider" />

		<applicationService serviceImplementation="com.intellij.spring.factories.SpringFactoryBeansManager" />
		<applicationService serviceImplementation="com.intellij.spring.SpringApplicationComponent" lazy="false" />

		<intentionAction>
			<className>com.intellij.spring.model.intentions.HardCodedStringToPlaceholderMoveIntention</className>
			<category>Spring</category>
		</intentionAction>

		<intentionAction>
			<className>com.intellij.spring.refactoring.SpringIntroduceBeanIntention</className>
			<category>Spring</category>
		</intentionAction>

		<intentionAction>
			<className>com.intellij.spring.refactoring.SpringUpdateSchemaIntention</className>
			<category>Spring</category>
		</intentionAction>

		<intentionAction>
			<className>com.intellij.spring.model.xml.custom.ParseCustomBeanIntention</className>
			<category>Spring</category>
		</intentionAction>

		<intentionAction>
			<className>com.intellij.spring.refactoring.UsePNamespaceIntention</className>
			<category>Spring</category>
		</intentionAction>

	</extensions>

	<extensions defaultExtensionNs="com.intellij.xml">
		<standardResourceProvider implementation="com.intellij.spring.SpringResourceProvider"/>
		<structureViewElementProvider implementation="com.intellij.spring.model.structure.SpringStructureViewElementProvider"/>
		<structureViewBuilderProvider implementation="com.intellij.spring.model.structure.SpringXmlStructureViewBuilderProvider"/>

		<implicitNamespaceDescriptorProvider implementation="consulo.spring.SpringImplicitNamespaceDescriptorProvider"/>
		<undefinedElementFixProvider implementation="consulo.spring.PNamespaceUndefinedElementFixProvider"/>

		<schemaProvider implementation="com.intellij.spring.schemas.SpringSchemaProvider"/>

		<dom.fileDescription implementation="com.intellij.spring.SpringDomFileDescription"/>
		<dom.extender domClass="com.intellij.spring.model.xml.beans.Beans" extenderClass="com.intellij.spring.SpringDefaultDomExtender$BeansExtender"/>
		<dom.extender domClass="com.intellij.spring.model.xml.beans.ListOrSet" extenderClass="com.intellij.spring.SpringDefaultDomExtender$ListOrSetExtender"/>
		<dom.extender domClass="com.intellij.spring.model.xml.SpringModelElement" extenderClass="com.intellij.spring.aop.SpringAopDomExtender"/>
		<dom.extender domClass="com.intellij.spring.model.xml.beans.Beans" extenderClass="com.intellij.spring.aop.SpringTxDomExtender"/>
		<dom.extender domClass="com.intellij.spring.model.xml.beans.SpringBean" extenderClass="com.intellij.spring.SpringPNamespaceDomExtender"/>
		<dom.extender domClass="com.intellij.spring.model.xml.CustomBeanWrapper" extenderClass="com.intellij.spring.SpringToolDomExtender"/>
	</extensions>

	<actions>
		<action id="Spring.Beans.Generate.Action" class="com.intellij.spring.model.actions.GenerateSpringDomElementActionGroup" text="Generate">
			<add-to-group anchor="last" group-id="GenerateGroup"/>
		</action>


		<action id="Spring.Beans.Generate.Setter.Dependency.Action" class="com.intellij.spring.model.actions.GenerateSpringBeanSetterDependencyAction">
			<add-to-group anchor="last" group-id="GenerateGroup"/>
		</action>
		<action id="Spring.Beans.Generate.Constructor.Dependency.Action" class="com.intellij.spring.model.actions.GenerateSpringBeanConstructorDependencyAction">
			<add-to-group anchor="last" group-id="GenerateGroup"/>
		</action>

		<action id="Spring.Template.Beans.ActionGroup" class="com.intellij.spring.model.actions.patterns.GenerateTemplateBeansGroup" text="Template Beans">
			<add-to-group anchor="last" group-id="GenerateGroup"/>
		</action>

		<action id="Spring.Patterns.ActionGroup" class="com.intellij.spring.model.actions.patterns.frameworks.FrameworkIntegrationActionGroup" text="Patterns">
			<add-to-group anchor="last" group-id="GenerateGroup"/>
		</action>

		<group id="Spring.Create.Context.Group" popup="true" text="Spring">
			<add-to-group anchor="last" group-id="NewGroup"/>
		</group>

		<!--<action id="Spring.Create.Context.File" class="com.intellij.spring.model.actions.create.CreateSpringConfigAction" text="Spring Config">
		  <add-to-group anchor="last" group-id="Spring.Create.Context.Group"/>
		</action>   -->

		<group id="Beans.Dependencies.PsiElement.Actions" popup="false">
			<reference ref="EditSource"/>
			<reference ref="FindUsages"/>
			<reference ref="RenameElement"/>
			<separator/>
		</group>

	</actions>
</consulo-plugin>
